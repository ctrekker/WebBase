About this course
|---|
<p>
This course was designed as both a tutorial and a reference. If you already know some HTML, but would like to learn more, a sidebar on the left of this page displays all of the different pages of this course. Along with this, a brief summary is offered at the bottom of each page, so if you are skimming, or already know a little, you can look back over the key points of each page. Examples are shown on each page, with the one exception of the "What is HTML?" page. At the bottom of the code sample, there is a view button, which will allow you to open a new window with the code being viewed. It is a good idea to do this if you don't understand a piece of code completely. At the bottom of each page there is a rate section and a comment section, both of which are optional. If you would like to send feedback, there is also a feedback icon at the bottom of each page if you would like to give feedback. I hope you enjoy learning HTML!
</p>
|=====|
What is HTML?
|---|
<p>HTML is the programming language used to make websites. Any website you visit on the internet is made up of HTML. There are lots of great website builders out there, which are good for making beautiful, content-rich websites quickly. However, having at least a little knowledge on HTML is a good thing to have. This tutorial will go through the very basics of how HTML works, and how to use it.</p>

|=====|
The Hello, World Program
|---|
<p>If you've programmed before, you probably know about the Hello, World program. If you're completely new, a Hello, World program it a basic program that just displays the words "Hello, World!" Although a very simple program, it is great for starters to learn what a programming language looks like, and the basics of how it works. The great thing is, the hello world program for HTML is very simple and easy to understand, even if you just started! Here's what it looks like:</p>
<pre code-res-id=0">
    
</pre>
<span>This may seem like an overwhelmingly large amount of code for just a blank page saying "Hello, World!" but in truth, most of it is just setup. Below is a breakdown of what each part does.</span>
<span>Line 1: $<l>html<g>/$</span>
<span class="tabbed italic">Signifies the start of a new HTML page</span>
<span>Line 2: $<l>head<g>/$</span>
<span class="tabbed italic">Signifies the start of the header of the page</span>
<span>Line 3: $<l>title<g>/$Hello, World!<l>/title<g></span>
<span class="tabbed italic">Tells the browser what to display on the page's tab. NOTE: This does not show uspan on the page itself. All the page content is located under the <body> tag on line 5</span>
<span>Line 4: $<l>/head<g>/$</span>
<span class="tabbed italic">Signifies the end of the header of the page (notice the / before head).</span>
<span>Line 5: $<l>body<g>/$</span>
<span class="tabbed italic">Signifies the start of the body of the page. This is where all of the content of the page is located.</span>
<span>Line 6: Hello, World!</span>
<span class="tabbed italic">This is the content of the page! AKA the text that shows uspan on the actual page itself, unlike the <head></span>
<span>Line 7: $<l>/body<g>/$</span>
<span class="tabbed italic">Signifies the start of the body of the page (once again, notice the / before body. It always means ending).</span>
<span>Line 8: $<l>/html<g>/$</span>
<span class="tabbed italic">Signifies the end of the HTML page (another example of the /).</span>
<br>
<p>This may seem way overcomplicated at first, but with practice, it will become super clear why each of those lines are there, and why others are not.</p>
<h3>Summary</h3>
<blockquote>
<ul>
    <li>Anything with $</$ and $>/$ surrounding it is called a tag or element</li>
    <li>A / before a tag name means it is signifying the end of an element</li>
    <li>The $<l>head<g>/$ element is only for setup, not for content. The body is used mainly for content.</li>
    <li>The content in the $<l>title<g>/$ tag shows up in the page tab, and depending on the browser, in other places, but not in the page itself, since it is located in the $<l>head<g>/$ element.</li>
</ul>
</blockquote>

|=====|
An introduction to elements
|---|
<p>
You've probably heard the elements of matter, but probably haven't heard of the elements of HTML. An element in HTML is, in simple terms, a piece of code that has 3 base capabilities: to contain more elements (have children), to be contained by an element (have parents), and have attributes. For now, we will be focusing on the first two base capabilities. As you saw in the hello world example, tags were used to signify the end or beginning of an element. Anything within the opening and closing tags of an element are called the element's children. Anything surrounding the element is a parent. To put this into view, you can see that the first tag you see is the $<l>html<g>/$ tag. This tag is what introduces the html element. If you look inside the $<l>html<g>/$ and $<l>/html<g>/$ tags, you will see that it has two children, being the $head/$ and $body/$ elements. This means that the $html/$ element has two children, and each of those children's parent is the $html/$ element. What is so cool about HTML is that each element can have an unlimited amount of children, and each child belongs to a parent element. This is called in html a hierarchy of elements, or an element tree.
</p>
<p>
Now we will demonstrate this concept with a simple breakdown of the hello world program.
</p>
<pre code-res-id="1">

</pre>
<p>
It is a good habit to get into to use comments. Definitely don't use quite as many as the example above, but use enough to get the point across. If you don't put any comments into your code, when you come back to it, it can be very difficult to understand.
</p>
<p>
Along with demonstrating somewhat over-the-top commenting, the example, written in comments, showed which elements are parents to others, and which children belong to the parent element. The whole concept of an element hierarchy can be difficult to grasp at first, but with practice, it will become easy to see which elements are children of what elements.
</p>
<h3>Summary</h3>
<blockquote>
    <ul>
        <li>Elements have a parent, and can have children</li>
        <li>The arrangement of elements in a HTML document is called an element hierarchy</li>
        <li>Commenting can be good for organization, and keeping your thoughts straight</li>
        <li>Over-commenting can lead to messy code. Remember, comments are only meant to be reminders!</li>
        <li>Practicing good habits early is a good way to stay organized later on</li>
    </ul>
</blockquote>
|=====|
The paragraph element
|---|
<p>
There are a few basic types of elements that make up the majority of the page. You already know about the $head/$, $body/$, and $html/$ elements, but probably aren't quite as sure about paragraph and header elements, so lets get started!
</p>
<p>
The first element we will talk about is the $p/$ element. The "p" stands for "paragraph", so this element is used to declare paragraphs. Although it can have children elements, it is quite common for this element to contain only text, and no element children. If you were looking carefully, you might have seen that in the hello world program, opening and closing $p/$ tags surrounded the words "Hello, World!". A great feature with the $p/$ element is that if you have two $p/$ elements in the same parent, both with content, a gap will appear between the two, thus creating the "paragraph" effect. Here's an example:
</p>
<pre code-res-id="2">

</pre>
<p>
Pretty simple, right? You might have noticed the $title/$ element in the $head/$, arranged in the same way as the hello world program, the only difference being the content. In addition to those similarities, the $body/$ is also arranged in the same way. The primary difference is the children of the $body/$. You can see that there are 3 different $p/$ elements, all direct children of the $body/$ element. Each one contains a small amount of text, but much more text can be added. Once again, $p/$ elements are very useful for creating separate paragraphs of text, serving as a useful content utility tag. In the next page, we will discuss how to create different size headers.
</p>
<h3>Summary</h3>
<blockquote>
    <ul>
        <li>$p/$ elements are used for creating paragraphs of text</li>
        <li>$p/$ elements with the same direct parent create page breaks between the content inside them</li>
    </ul>
</blockquote>
|=====|
The header elements
|---|
<p>
In documents, a header is a small piece of text that is written to tell the reader what the following content will be about. Headers are generally larger than the average text size, and are often times bolded as well. In HTML, headers are the same. Similarly to the $p/$ element, there are elements devoted to creating headers. But it turns out there are more than one types of header elements. Don't this let this be a shock to you, but there are six. Each one has a different tag to signify the start of the element, but each tag is very similar. These tags are the $h1/$, $h2/$, $h3/$, $h4/$, $h5/$, and $h6/$ elements. The largest header is the $h1/$, while the smallest is the $h6/$ header. Although there does seem to be a pattern, there is no $h7/$ or higher numbers. Here is an example:
</p>
<pre code-res-id="3">

</pre>
<p>
That's really it! Fairly similar to the $p/$ element, but adds additional styling features. The two primary features are that the text size is different than the $p/$ element, and the text inside any header element is bolded, to emphasize even further.
</p>
<h3>Summary</h3>
<blockquote>
    <ul>
        <li>Headers are used to emphasize text in HTML</li>
        <li>There are six types of header elements</li>
        <li>The $h1/$ element is the largest, while the $h6/$ element is the smallest</li>
        <li>Since header elements display content on the page, they belong in the $body/$ element</li>
    </ul>
</blockquote>
|=====|
The div and span elements
|---|
<p>
On this page, I will introduce to you a few new elements, being the $div/$ and $span/$ elements. Right now, they probably won't seem very important, but will soon become vital to your websites.
</p>
<h3>Div Elements</h3>
<p>
On its own, a $div/$ is not always very useful. It stands for divider, because it is commonly used to divide sections of a page. It has nearly no styling that comes with it, so they are usually customized using CSS. Lets say we want a header section and a content section in our page. Here is a quick example demonstrating this concept.
</p>
<pre code-res-id="4">

</pre>
<p>
As you can see, there are two $div/$ elements in this example: one surrounding the header, and another surrounding the paragraphs. Not only does this help divide up the page into sections, later on, it will help with CSS styling. This is another good coding habit to start working on in these early phases in learning HTML.
</p>
<h3>Span Elements</h3>
<p>
Span elements, being much similar to $div/$ elements in that they don't have much default styling, are not very useful until you start CSS. However, once you learn just a little CSS, they will become very useful. You know that $div/$ elements are used for dividing sections of your page. $span/$ elements are used to mark spans of text inside of a paragraph, header, or really any other content-holding element. Of course, they can be used otherwise, but this is their intended purpose. Don't worry about $span/$ elements right now, because they are useless unless you style them with CSS. The example below will show you how to use them.
</p>
<pre code-res-id="5">

</pre>
<p>
If you view the example, you will see that the $span/$ appears to have done nothing to the word "Hello", because it didn't. Not very useful without CSS. So what is all this talk of CSS? Well, you can find out in the CSS course, which is linked on the next page! I highly advise you to get through that before continuing on, because the following pages assume you know at least a little CSS.
</p>
<h3>Summary</h3>
<blockquote>
    <ul>
        <li>Div elements are used to divide a page up</li>
        <li>Div elements don't have any default visual styling, so without CSS, they don't appear on the page</li>
        <li>Span elements don't change text unless CSS is applied</li>
        <li>These two elements are not of much use without CSS</li>
    </ul>
    Let's learn CSS now!
</blockquote>
|=====|
HTML attributes
|---|
<p>
Attributes are real important parts of HTML. They are used to describe elements, thus the name attribute. A HTML attribute consists of a key, and of a value. The key and value are seperated with an "=" sign, and the value is surrounded by quotations. Each key-value set, or attribute declaration is separated with a space. Although there are many build in attributes included in HTML, you can define an attribute to any name and any value.
</p>
<p>
Let's say you have two different $p/$ elements, but you want to give them a specific value in which they belong (an ID). Without attributes, this is made very difficult. All you have to do is set an element's $id/$ attribute to whatever it should be identified as. In the $id/$ attribute's case, it is a good habit to keep id's unique for each element, that way two elements never have the same ID and create conflicts. If you don't want your element to have an ID, no problem! Just don't put in the $id/$ attribute, because it is completely optional.
</p>
<p>
Here's an example to show what attributes look like, how to define them, and the rules of attributes:
</p>
<pre code-res-id="6">

</pre>
<p>
You probably noticed that the only elements that had attributes were those within the body. Attributes still can be applied outside of the $body/$, but at this stage in your HTML learning, they won't be of much use. Even now, the 'id' attribute might not seem very useful, but in CSS, specific elements are often targeted using IDs, or another attribute called the $class/$ attribute. The $class/$ attribute is very similar to the ID element, as it is used to identify elements. However, the main difference between the two is that it is fine for two elements to have the same class. The $id/$ and $class/$ elements are definitly not the only attributes, and you will discover more and more as you keep learning, but these two are two of the most important elements in HTML.
</p>
<h3>Summary</h3>
<blockquote>
    <ul>
        <li>Attributes are made up of a key and a value</li>
        <li>Attributes can be found in the opening tag of an element</li>
        <li>Attributes are used to set data to a specific element</li>
        <li>Attributes are tremendously important</li>
    </ul>
</blockquote>
|=====|
The a and img elements
|---|
<h3>Link Elements (a)</h3>
<p>
The $a/$ element is used to create hyperlinks, or more commonly known as nowadays as links. Links take the user to another HTML page, whether it be your own, or somebody else's. The reason this element is being introduced after the introduction is because they are both heavily intervened with certain attributes. In the $a/$ element's case, it uses the $href/$ ID to specify where the link should lead. The value of this element contains a URL. An $a/$ element without the $href/$ attribute is not very useful, so whenever you are using a link, it should nearly always have a $href/$ attribute defined in it.
</p>
<p>
Here's a quick and straightfoward example of how an $a/$ element should be defined:
</p>
<pre code-res-id="7">

</pre>
<p>
Simple! Remember that the URL is not displayed in a link, and that the text that is to be displayed should be located inside the $a/$ element.
</p>
<h3>Img Elements</h3>
<p>
Img stands for image. This allows you to put images into your websites using this element. This isn't quite as simple as it seems, though. Unlike most online website tools we have access to today, you can't simply drag an image in. Similarly to the $a/$ element, the $img/$ element uses the $src/$ attribute, which stands for source. This is a URL pointing to the image file. This means if you have a offline image (stored on your computer), then it will have to be uploaded to some form of public server. Lets take a look at the structure now.
</p>
<p>
We will be using an image of a ball on this page. The name of the ball picture is $ball.png/$, so we will put that in the $src/$ attribute. The $img/$ element is also special in another way. Every element we have gone over so far has had a combination of an opening and closing tag. In this element's case, it is a combination of the two. It looks like the opening tag, without a closing tag closing the element. In fact, there is no element body, so an image element cannot have children. Here's what it looks like.
</p>
<pre code-res-id="8">

</pre>
<p>
The only thing we need to do with this code is put it inside the body of an HTML document to display it. Here's what the image looks like:
</p>
<img src="ball.jpg" width="250" height="250"/>
<p>
This course along with a few other courses will use this image as an example image to demonstrate concepts of drawing image graphics.
</p>
<h3>Summary</h3>
<blockquote>
    <ul>
        <li>Links (or hyperlinks) can be clicked on to get directed to a new location</li>
        <li>Links come with built-in styling, being blue and underlined</li>
        <li>Links need a $href/$ attribute to know where to link to</li>
        <li>Images display an image based on a URL to a image file</li>
        <li>Image's path is pointed to using the $src/$ attribute</li>
        <li>Images cannot have any children elements</li>
        <li>EXTRA: Images width/height can be set with the $width/$ and $height/$ attributes. The measurement is done in pixels.</li>
    </ul>
</blockquote>
|=====|
Learning CSS
|---|
<p>
Since CSS is very important in HTML, to be able to understand much more HTML code without knowledge of CSS is very difficult. If you don't already know CSS, I highly advise you take at least a small chunk of the CSS tutorial before proceeding to the next page in the HTML course.
</p>
<p>
<span class="button" onclick="goto('#/CSS')">Take CSS Course!</span>
</p>